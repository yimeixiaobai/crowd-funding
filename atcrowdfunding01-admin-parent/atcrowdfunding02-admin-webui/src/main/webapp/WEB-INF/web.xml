<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<!-- needed for ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-persist-*.xml</param-value>
	</context-param>

	<!-- Bootstraps the root web application context before servlet initialization -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 指定字符集 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- 强制请求设置字符集 -->
		<init-param>
			<param-name>forceRequestEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 强制响应设置字符集 -->
		<init-param>
			<param-name>forceResponseEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		
	</filter>
	
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-web-mvc.xml</param-value>
		</init-param>
		<!-- Servlet默认声明周期中，创建对象是第一次接收到请求时
			而设置DispatcherServlet创建对象后有大量框架初始化工作，不适合在第一次请求时来做
			load-on-startup就是为了让DispatcherServlet在web应用启动时创建对象，初始化
		 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<!-- url-pattern配置方式1：/表示拦截所有请求 -->
		<!--<url-pattern>/</url-pattern> -->
		
		<!-- url-pattern配置方式2：配置请求扩展名 -->
		<!--优点1：css，js，png静态资源不会过滤 -->
		<!--优点2：可以实现伪静态效果，表面上看起来是访问一个HTML静态资源，但是实际上是java代码运算 
			伪静态作用1：给黑客入侵增加难度
			伪静态作用2：有利于SEO优化
			缺点：不符合RESTful风格
		-->
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>
</web-app>